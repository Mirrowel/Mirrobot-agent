name: opencode

on:
  issue_comment:
    types: [created]

jobs:
  opencode:
    if: |
      (
      contains(github.event.comment.body, ' /oc') ||
      startsWith(github.event.comment.body, '/oc') ||
      contains(github.event.comment.body, ' /opencode') ||
      startsWith(github.event.comment.body, '/opencode')
      ) && (
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      pull-requests: read
      id-token: write
    steps:

      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Inject Custom Config (For Proxy Support)
        run: |
          mkdir -p ~/.config/opencode
          CONFIG='{
            "$schema": "https://opencode.ai/config.json",
            "provider": {
              "llm-proxy": {
                "npm": "@ai-sdk/openai-compatible",
                "name": "Proxy",
                "options": {
                  "baseURL": "${{ secrets.PROXY_BASE_URL }}",
                  "apiKey": "${{ secrets.PROXY_API_KEY }}",
                  "timeout": 300000, // 5 minute timeout in ms
                  "headers": {
                    "User-Agent": "OpenCode/1.0",
                    "X-Custom-Header": "your-value"
                  }
                },
                "models": {
                  "main_model": {
                    "id": "${{ secrets.OPENCODE_MODEL }}",
                    "name": "Custom Model",
                    "limit": {
                      "context": 262000,
                      "output": 64192
                    }
                  },
                  "fast_model": {
                    "id": "${{ secrets.OPENCODE_FAST_MODEL }}",
                    "name": "Fast Custom Model",
                    "limit": {
                      "context": 262000,
                      "output": 64192
                    }
                  }
                }
              }
            },
            "model": "llm-proxy/main_model",
            "small_model": "llm-proxy/fast_model",
            "username": "mirrobot-agent",
            "autoupdate": true
          }'
          echo "$CONFIG" > ~/.config/opencode/opencode.json

      - name: Check for Python requirements file
        id: check_requirements_file
        run: |
          if [ -f requirements.txt ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check_requirements_file.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        if: steps.check_requirements_file.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12

      - name: Install dependencies
        if: steps.check_requirements_file.outputs.exists == 'true'
        run: pip install -r requirements.txt

      - name: Check for model override
        id: model_override
        env:
          MODEL_OVERRIDE_SECRET: ${{ secrets.OPENCODE_MODEL_OVERRIDE }}
        run: |
          if [ -n "$MODEL_OVERRIDE_SECRET" ]; then
            echo "Model override from secret: $MODEL_OVERRIDE_SECRET"
            echo "model_arg=$MODEL_OVERRIDE_SECRET" >> $GITHUB_OUTPUT
          else
            echo "No model override found, using default."
            echo "model_arg=" >> $GITHUB_OUTPUT
          fi

      - name: Run opencode
        uses: sst/opencode/github@latest
        env:
          OPENCODE_API_KEY: ${{ secrets.PROXY_API_KEY }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        with:
          model: ${{ steps.model_override.outputs.model_arg || 'llm-proxy/main_model' }}
          share: true